[
    {
    "id": 1,
    "slug": "pilares-poo",
    "title": "Los 4 pilares fundamentales de la POO",
    "description": "La POO es un paradigma de programación que organiza el código en torno a objetos que representan entidades del mundo real o conceptual, Esta se basa en 4 pilares fundamentales.",
    "author": "Carlos Valencia",
    "date": "2025-06-11",
    "tags": ["poo", "programacion", "fundamentos"],
        "content": [
      {
        "subtitle": "Introducción",
        "contenido": "¿Qué es la Programación Orientada a Objetos (POO)? \n La POO es un paradigma de programación que organiza el código en torno a objetos que representan entidades del mundo real o conceptual. Cada objeto contiene datos (atributos) y comportamiento (métodos). Este enfoque favorece la reutilización de código, la mantenibilidad y la escalabilidad. <br> <br>"
      },
      {
        "subtitle": "Los 4 pilares fundamentales de la POO",
        "contenido": "<hr> <br> <br>"
      },
      {
        "subtitle": "1. 🧬 Abstracción",
        "contenido": "Es el proceso de ocultar los detalles internos y mostrar solo lo necesario. Permite centrarse en \"qué hace un objeto\" en lugar de \"cómo lo hace\". <br> <br>"
      },
      {
        "subtitle": "Ventajas de la abstracción:",
        "contenido": "🟢Reducción de complejidad. <br>🟢Mayor claridad y enfoque en el comportamiento esencial.<br>🟢Fomenta el uso de interfaces o clases abstractas.<br> <br>"
      },
      {
        "subtitle": "2. 🛡️ Encapsulamiento",
        "contenido": "Es la práctica de ocultar los datos internos de un objeto y permitir el acceso solo a través de métodos públicos (getters/setters).<br> <br>"
      },
      {
        "subtitle": "Ventajas del encapsulamiento:",
        "contenido": "🟢Control del acceso a los datos. <br>🟢Mejora la seguridad. <br>🟢Reduce el acoplamiento.<br> <br>"
      },
      {
        "subtitle": "3. 🧬 Herencia",
        "contenido": "Es la capacidad de una clase de heredar propiedades y comportamientos de otra clase. Promueve la reutilización de código.<br> <br>"
      },
      {
        "subtitle": "Ventajas de la herencia:",
        "contenido": "🟢Reutilización de código. <br>🟢Organización jerárquica. <br>🟢Extensibilidad.<br> <br>"
      },
      {
        "subtitle": "4. 🔄 Polimorfismo",
        "contenido": "Es la capacidad de un objeto de adoptar múltiples formas. Es decir, una misma acción puede comportarse de manera diferente según el contexto.<br> <br>"
      },
      {
        "subtitle": "Ventajas del polimorfismo:",
        "contenido": "🟢Mayor flexibilidad.<br>🟢Código más limpio y reutilizable.<br>🟢Permite el uso de interfaces y clases base.<br> <br>"
      },
      {
        "subtitle": "¿Por qué son importantes estos pilares?",
        "contenido": "🟢Permiten diseñar software robusto, escalable y mantenible.<br>🟢Separan las responsabilidades y mejoran el principio de responsabilidad única.<br>🟢Hacen que el código sea más cercano a cómo pensamos los humanos en objetos y comportamientos.<br> <br>"
      },
      {
        "subtitle": "Conclusión",
        "contenido": "La POO sigue siendo clave en la ingeniería de software moderna, especialmente en lenguajes como C#, Java, Python, C++. Comprender profundamente estos pilares es esencial para cualquier desarrollador que busque escribir código limpio, sólido y orientado al cambio.<br> <br>"
      }
    ]
  },
      {
    "id": 2,
    "slug": "principios-solid",
    "title": "Principios SOLID: Guía Completa",
    "description": "Aquí tienes una guía completa y detallada sobre los Principios SOLID",
    "author": "Carlos Valencia",
    "date": "2025-06-13",
    "tags": ["solid", "programacion", "fundamentos"],

        "content": [
      {
        "subtitle": "¿Qué es SOLID?",
        "contenido": "SOLID es un acrónimo que representa cinco principios fundamentales de la programación orientada a objetos, formulados por Robert C. Martin (conocido como “Uncle Bob”). Estos principios tienen como objetivo escribir código:<br> <ul><li>Más limpio</li>  <li>Mantenible</li> <li>Escalable</li> <li>Fácil de probar y extender</li></ul> <br> <br>"
      },
      {
        "subtitle": "1. Single Responsibility Principle (SRP)",
        "contenido": "“Una clase debe tener una única razón para cambiar.”<br><b>Definición</b><br> Cada clase o módulo debe encargarse de una única funcionalidad o responsabilidad. Si una clase tiene múltiples razones para cambiar, está haciendo más de lo que debería.<br>"
      },{
        "subtitle": "2. Open/Closed Principle (OCP)",
        "contenido": "“Las entidades de software deben estar abiertas para extensión, pero cerradas para modificación.”<br><b>Definición</b><br>El comportamiento de una clase debe poder extenderse sin necesidad de modificar su código original.<br>"
      },{
        "subtitle": "3. Liskov Substitution Principle (LSP)",
        "contenido": "“Los objetos de una clase derivada deben poder sustituir a los objetos de su clase base sin alterar el comportamiento esperado.”<br><b>Definición</b><br>Si una clase B hereda de A, debería poder usarse donde sea que se use A, sin errores ni comportamientos inesperados.<br>"
      },{
        "subtitle": "4. Interface Segregation Principle (ISP)",
        "contenido": "“Ningún cliente debe verse obligado a depender de métodos que no utiliza.”<br><b>Definición</b><br>Las interfaces deben ser específicas y pequeñas, en lugar de contener métodos innecesarios para algunas clases.   <br>"
      },{
        "subtitle": "5. Dependency Inversion Principle (DIP)",
        "contenido": "Los módulos de alto nivel no deben depender de módulos de bajo nivel. Ambos deben depender de abstracciones.”<br><b>Definición</b><br> En lugar de que las clases dependan directamente de implementaciones concretas, deben depender de interfaces o abstracciones.<br>"
      },{
        "subtitle": "Beneficios de aplicar SOLID",
        "contenido": "<ul><li>Código modular y reutilizable</li><li>Facilita el testing automatizado</li><li>Menor riesgo de bugs al modificar código</li><li>Mejora la colaboración en equipo</li><li>Escalabilidad y mantenimiento a largo lazo</li></ul>"
      },{
        "subtitle": "",
        "contenido": "<br> <br>"
      }
    ]
  }
  ]
